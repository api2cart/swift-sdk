//
// ReturnAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ReturnAPI {

    /**
     return.action.list
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func returnActionList(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ReturnActionList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return returnActionListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     return.action.list
     - GET /return.action.list.json
     - Retrieve list of return actions
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - returns: RequestBuilder<ReturnActionList200Response> 
     */
    open class func returnActionListWithRequestBuilder() -> RequestBuilder<ReturnActionList200Response> {
        let localVariablePath = "/return.action.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReturnActionList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     return.count
     
     - parameter orderIds: (query) Counts return requests specified by order ids (optional)
     - parameter customerId: (query) Counts return requests quantity specified by customer id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter status: (query) Defines status (optional)
     - parameter returnType: (query) Retrieves returns specified by return type (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func returnCount(orderIds: String? = nil, customerId: String? = nil, storeId: String? = nil, status: String? = nil, returnType: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ReturnCount200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return returnCountWithRequestBuilder(orderIds: orderIds, customerId: customerId, storeId: storeId, status: status, returnType: returnType, createdFrom: createdFrom, createdTo: createdTo, modifiedFrom: modifiedFrom, modifiedTo: modifiedTo, reportRequestId: reportRequestId, disableReportCache: disableReportCache).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     return.count
     - GET /return.count.json
     - Count returns in store
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter orderIds: (query) Counts return requests specified by order ids (optional)
     - parameter customerId: (query) Counts return requests quantity specified by customer id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter status: (query) Defines status (optional)
     - parameter returnType: (query) Retrieves returns specified by return type (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - returns: RequestBuilder<ReturnCount200Response> 
     */
    open class func returnCountWithRequestBuilder(orderIds: String? = nil, customerId: String? = nil, storeId: String? = nil, status: String? = nil, returnType: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil) -> RequestBuilder<ReturnCount200Response> {
        let localVariablePath = "/return.count.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "order_ids": (wrappedValue: orderIds?.encodeToJSON(), isExplode: true),
            "customer_id": (wrappedValue: customerId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "return_type": (wrappedValue: returnType?.encodeToJSON(), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(), isExplode: true),
            "report_request_id": (wrappedValue: reportRequestId?.encodeToJSON(), isExplode: true),
            "disable_report_cache": (wrappedValue: disableReportCache?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReturnCount200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     return.info
     
     - parameter id: (query) Entity id 
     - parameter orderId: (query) Defines the order id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_products")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func returnInfo(id: String, orderId: String? = nil, storeId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ReturnInfo200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return returnInfoWithRequestBuilder(id: id, orderId: orderId, storeId: storeId, responseFields: responseFields, params: params, exclude: exclude).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     return.info
     - GET /return.info.json
     - Retrieve return information.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Entity id 
     - parameter orderId: (query) Defines the order id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_products")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - returns: RequestBuilder<ReturnInfo200Response> 
     */
    open class func returnInfoWithRequestBuilder(id: String, orderId: String? = nil, storeId: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil) -> RequestBuilder<ReturnInfo200Response> {
        let localVariablePath = "/return.info.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "order_id": (wrappedValue: orderId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReturnInfo200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     return.list
     
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter orderId: (query) Defines the order id (optional)
     - parameter orderIds: (query) Retrieves return requests specified by order ids (optional)
     - parameter customerId: (query) Retrieves return requests specified by customer id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter status: (query) Defines status (optional)
     - parameter returnType: (query) Retrieves returns specified by return type (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_products")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func returnList(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, orderId: String? = nil, orderIds: String? = nil, customerId: String? = nil, storeId: String? = nil, status: String? = nil, returnType: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseReturnList?, _ error: Error?) -> Void)) -> RequestTask {
        return returnListWithRequestBuilder(start: start, count: count, pageCursor: pageCursor, orderId: orderId, orderIds: orderIds, customerId: customerId, storeId: storeId, status: status, returnType: returnType, createdFrom: createdFrom, createdTo: createdTo, modifiedFrom: modifiedFrom, modifiedTo: modifiedTo, responseFields: responseFields, params: params, exclude: exclude, reportRequestId: reportRequestId, disableReportCache: disableReportCache).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     return.list
     - GET /return.list.json
     - Get list of return requests from store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter orderId: (query) Defines the order id (optional)
     - parameter orderIds: (query) Retrieves return requests specified by order ids (optional)
     - parameter customerId: (query) Retrieves return requests specified by customer id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter status: (query) Defines status (optional)
     - parameter returnType: (query) Retrieves returns specified by return type (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,order_products")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter reportRequestId: (query) Report request id (optional)
     - parameter disableReportCache: (query) Disable report cache for current request (optional, default to false)
     - returns: RequestBuilder<ModelResponseReturnList> 
     */
    open class func returnListWithRequestBuilder(start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, orderId: String? = nil, orderIds: String? = nil, customerId: String? = nil, storeId: String? = nil, status: String? = nil, returnType: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, responseFields: String? = nil, params: String? = nil, exclude: String? = nil, reportRequestId: String? = nil, disableReportCache: Bool? = nil) -> RequestBuilder<ModelResponseReturnList> {
        let localVariablePath = "/return.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "order_id": (wrappedValue: orderId?.encodeToJSON(), isExplode: true),
            "order_ids": (wrappedValue: orderIds?.encodeToJSON(), isExplode: true),
            "customer_id": (wrappedValue: customerId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "return_type": (wrappedValue: returnType?.encodeToJSON(), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
            "report_request_id": (wrappedValue: reportRequestId?.encodeToJSON(), isExplode: true),
            "disable_report_cache": (wrappedValue: disableReportCache?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseReturnList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     return.reason.list
     
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func returnReasonList(storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ReturnReasonList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return returnReasonListWithRequestBuilder(storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     return.reason.list
     - GET /return.reason.list.json
     - Retrieve list of return reasons
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<ReturnReasonList200Response> 
     */
    open class func returnReasonListWithRequestBuilder(storeId: String? = nil) -> RequestBuilder<ReturnReasonList200Response> {
        let localVariablePath = "/return.reason.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReturnReasonList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     return.status.list
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func returnStatusList(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ReturnStatusList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return returnStatusListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     return.status.list
     - GET /return.status.list.json
     - Retrieve list of statuses
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - returns: RequestBuilder<ReturnStatusList200Response> 
     */
    open class func returnStatusListWithRequestBuilder() -> RequestBuilder<ReturnStatusList200Response> {
        let localVariablePath = "/return.status.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ReturnStatusList200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
