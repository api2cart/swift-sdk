//
// CustomerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CustomerAPI {

    /**
     customer.add
     
     - parameter customerAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerAdd(customerAdd: CustomerAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CustomerAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return customerAddWithRequestBuilder(customerAdd: customerAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     customer.add
     - POST /customer.add.json
     - Add customer into store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter customerAdd: (body)  
     - returns: RequestBuilder<CustomerAdd200Response> 
     */
    open class func customerAddWithRequestBuilder(customerAdd: CustomerAdd) -> RequestBuilder<CustomerAdd200Response> {
        let localVariablePath = "/customer.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: customerAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     customer.address.add
     
     - parameter customerAddressAdd: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerAddressAdd(customerAddressAdd: CustomerAddressAdd, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AttributeAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return customerAddressAddWithRequestBuilder(customerAddressAdd: customerAddressAdd).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     customer.address.add
     - POST /customer.address.add.json
     - Add customer address.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter customerAddressAdd: (body)  
     - returns: RequestBuilder<AttributeAdd200Response> 
     */
    open class func customerAddressAddWithRequestBuilder(customerAddressAdd: CustomerAddressAdd) -> RequestBuilder<AttributeAdd200Response> {
        let localVariablePath = "/customer.address.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: customerAddressAdd)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AttributeAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     customer.attribute.list
     
     - parameter customerId: (query) Retrieves orders specified by customer id 
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerAttributeList(customerId: String, count: Int? = nil, pageCursor: String? = nil, storeId: String? = nil, langId: String? = nil, params: String? = nil, exclude: String? = nil, responseFields: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseCustomerAttributeList?, _ error: Error?) -> Void)) -> RequestTask {
        return customerAttributeListWithRequestBuilder(customerId: customerId, count: count, pageCursor: pageCursor, storeId: storeId, langId: langId, params: params, exclude: exclude, responseFields: responseFields).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     customer.attribute.list
     - GET /customer.attribute.list.json
     - Get attributes for specific customer
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter customerId: (query) Retrieves orders specified by customer id 
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "force_all")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - returns: RequestBuilder<ModelResponseCustomerAttributeList> 
     */
    open class func customerAttributeListWithRequestBuilder(customerId: String, count: Int? = nil, pageCursor: String? = nil, storeId: String? = nil, langId: String? = nil, params: String? = nil, exclude: String? = nil, responseFields: String? = nil) -> RequestBuilder<ModelResponseCustomerAttributeList> {
        let localVariablePath = "/customer.attribute.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "customer_id": (wrappedValue: customerId.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseCustomerAttributeList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     customer.count
     
     - parameter groupId: (query) Customer group_id (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter storeId: (query) Counts customer specified by store id (optional)
     - parameter customerListId: (query) The numeric ID of the customer list in Demandware. (optional)
     - parameter avail: (query) Defines category&#39;s visibility status (optional, default to true)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Counts customers that are searched specified by field (optional)
     - parameter ids: (query) Counts customers specified by ids (optional)
     - parameter sinceId: (query) Retrieve entities starting from the specified id. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerCount(groupId: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, storeId: String? = nil, customerListId: String? = nil, avail: Bool? = nil, findValue: String? = nil, findWhere: String? = nil, ids: String? = nil, sinceId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CustomerCount200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return customerCountWithRequestBuilder(groupId: groupId, createdFrom: createdFrom, createdTo: createdTo, modifiedFrom: modifiedFrom, modifiedTo: modifiedTo, storeId: storeId, customerListId: customerListId, avail: avail, findValue: findValue, findWhere: findWhere, ids: ids, sinceId: sinceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     customer.count
     - GET /customer.count.json
     - Get number of customers from store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter groupId: (query) Customer group_id (optional)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter storeId: (query) Counts customer specified by store id (optional)
     - parameter customerListId: (query) The numeric ID of the customer list in Demandware. (optional)
     - parameter avail: (query) Defines category&#39;s visibility status (optional, default to true)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Counts customers that are searched specified by field (optional)
     - parameter ids: (query) Counts customers specified by ids (optional)
     - parameter sinceId: (query) Retrieve entities starting from the specified id. (optional)
     - returns: RequestBuilder<CustomerCount200Response> 
     */
    open class func customerCountWithRequestBuilder(groupId: String? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, storeId: String? = nil, customerListId: String? = nil, avail: Bool? = nil, findValue: String? = nil, findWhere: String? = nil, ids: String? = nil, sinceId: String? = nil) -> RequestBuilder<CustomerCount200Response> {
        let localVariablePath = "/customer.count.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "group_id": (wrappedValue: groupId?.encodeToJSON(), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "customer_list_id": (wrappedValue: customerListId?.encodeToJSON(), isExplode: true),
            "avail": (wrappedValue: avail?.encodeToJSON(), isExplode: true),
            "find_value": (wrappedValue: findValue?.encodeToJSON(), isExplode: true),
            "find_where": (wrappedValue: findWhere?.encodeToJSON(), isExplode: true),
            "ids": (wrappedValue: ids?.encodeToJSON(), isExplode: true),
            "since_id": (wrappedValue: sinceId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerCount200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     customer.delete
     
     - parameter id: (query) Identifies customer specified by the id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerDelete(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CustomerDelete200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return customerDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     customer.delete
     - DELETE /customer.delete.json
     - Delete customer from store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Identifies customer specified by the id 
     - returns: RequestBuilder<CustomerDelete200Response> 
     */
    open class func customerDeleteWithRequestBuilder(id: String) -> RequestBuilder<CustomerDelete200Response> {
        let localVariablePath = "/customer.delete.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerDelete200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     customer.find
     
     - parameter findValue: (query) Entity search that is specified by some value 
     - parameter findWhere: (query) Entity search that is specified by the comma-separated unique fields (optional, default to "email")
     - parameter findParams: (query) Entity search that is specified by comma-separated parameters (optional, default to "whole_words")
     - parameter storeId: (query) Store Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerFind(findValue: String, findWhere: String? = nil, findParams: String? = nil, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CustomerFind200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return customerFindWithRequestBuilder(findValue: findValue, findWhere: findWhere, findParams: findParams, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     customer.find
     - GET /customer.find.json
     - Find customers in store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter findValue: (query) Entity search that is specified by some value 
     - parameter findWhere: (query) Entity search that is specified by the comma-separated unique fields (optional, default to "email")
     - parameter findParams: (query) Entity search that is specified by comma-separated parameters (optional, default to "whole_words")
     - parameter storeId: (query) Store Id (optional)
     - returns: RequestBuilder<CustomerFind200Response> 
     */
    open class func customerFindWithRequestBuilder(findValue: String, findWhere: String? = nil, findParams: String? = nil, storeId: String? = nil) -> RequestBuilder<CustomerFind200Response> {
        let localVariablePath = "/customer.find.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "find_value": (wrappedValue: findValue.encodeToJSON(), isExplode: true),
            "find_where": (wrappedValue: findWhere?.encodeToJSON(), isExplode: true),
            "find_params": (wrappedValue: findParams?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerFind200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     customer.group.add
     
     - parameter name: (query) Customer group name 
     - parameter storeId: (query) Store Id (optional)
     - parameter storesIds: (query) Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerGroupAdd(name: String, storeId: String? = nil, storesIds: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CustomerGroupAdd200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return customerGroupAddWithRequestBuilder(name: name, storeId: storeId, storesIds: storesIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     customer.group.add
     - POST /customer.group.add.json
     - Create customer group.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter name: (query) Customer group name 
     - parameter storeId: (query) Store Id (optional)
     - parameter storesIds: (query) Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)
     - returns: RequestBuilder<CustomerGroupAdd200Response> 
     */
    open class func customerGroupAddWithRequestBuilder(name: String, storeId: String? = nil, storesIds: String? = nil) -> RequestBuilder<CustomerGroupAdd200Response> {
        let localVariablePath = "/customer.group.add.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "stores_ids": (wrappedValue: storesIds?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerGroupAdd200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     customer.group.list
     
     - parameter disableCache: (query) Disable cache for current request (optional, default to false)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter groupIds: (query) Groups that will be assigned to a customer (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,additional_fields")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerGroupList(disableCache: Bool? = nil, pageCursor: String? = nil, start: Int? = nil, count: Int? = nil, storeId: String? = nil, langId: String? = nil, groupIds: String? = nil, params: String? = nil, exclude: String? = nil, responseFields: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseCustomerGroupList?, _ error: Error?) -> Void)) -> RequestTask {
        return customerGroupListWithRequestBuilder(disableCache: disableCache, pageCursor: pageCursor, start: start, count: count, storeId: storeId, langId: langId, groupIds: groupIds, params: params, exclude: exclude, responseFields: responseFields).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     customer.group.list
     - GET /customer.group.list.json
     - Get list of customers groups.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter disableCache: (query) Disable cache for current request (optional, default to false)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter storeId: (query) Store Id (optional)
     - parameter langId: (query) Language id (optional)
     - parameter groupIds: (query) Groups that will be assigned to a customer (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,name,additional_fields")
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - returns: RequestBuilder<ModelResponseCustomerGroupList> 
     */
    open class func customerGroupListWithRequestBuilder(disableCache: Bool? = nil, pageCursor: String? = nil, start: Int? = nil, count: Int? = nil, storeId: String? = nil, langId: String? = nil, groupIds: String? = nil, params: String? = nil, exclude: String? = nil, responseFields: String? = nil) -> RequestBuilder<ModelResponseCustomerGroupList> {
        let localVariablePath = "/customer.group.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "disable_cache": (wrappedValue: disableCache?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "lang_id": (wrappedValue: langId?.encodeToJSON(), isExplode: true),
            "group_ids": (wrappedValue: groupIds?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseCustomerGroupList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     customer.info
     
     - parameter id: (query) Retrieves customer&#39;s info specified by customer id 
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,email,first_name,last_name")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter storeId: (query) Retrieves customer info specified by store id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerInfo(id: String, params: String? = nil, responseFields: String? = nil, exclude: String? = nil, storeId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CustomerInfo200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return customerInfoWithRequestBuilder(id: id, params: params, responseFields: responseFields, exclude: exclude, storeId: storeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     customer.info
     - GET /customer.info.json
     - Get customers' details from store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter id: (query) Retrieves customer&#39;s info specified by customer id 
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,email,first_name,last_name")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter storeId: (query) Retrieves customer info specified by store id (optional)
     - returns: RequestBuilder<CustomerInfo200Response> 
     */
    open class func customerInfoWithRequestBuilder(id: String, params: String? = nil, responseFields: String? = nil, exclude: String? = nil, storeId: String? = nil) -> RequestBuilder<CustomerInfo200Response> {
        let localVariablePath = "/customer.info.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomerInfo200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     customer.list
     
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,email,first_name,last_name")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter groupId: (query) Customer group_id (optional)
     - parameter storeId: (query) Retrieves customers specified by store id (optional)
     - parameter customerListId: (query) The numeric ID of the customer list in Demandware. (optional)
     - parameter avail: (query) Defines category&#39;s visibility status (optional, default to true)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Customer search that is specified by field (optional)
     - parameter sortBy: (query) Set field to sort by (optional, default to "created_time")
     - parameter sortDirection: (query) Set sorting direction (optional, default to "asc")
     - parameter ids: (query) Retrieves customers specified by ids (optional)
     - parameter sinceId: (query) Retrieve entities starting from the specified id. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerList(pageCursor: String? = nil, start: Int? = nil, count: Int? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, params: String? = nil, responseFields: String? = nil, exclude: String? = nil, groupId: String? = nil, storeId: String? = nil, customerListId: String? = nil, avail: Bool? = nil, findValue: String? = nil, findWhere: String? = nil, sortBy: String? = nil, sortDirection: String? = nil, ids: String? = nil, sinceId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseCustomerList?, _ error: Error?) -> Void)) -> RequestTask {
        return customerListWithRequestBuilder(pageCursor: pageCursor, start: start, count: count, createdFrom: createdFrom, createdTo: createdTo, modifiedFrom: modifiedFrom, modifiedTo: modifiedTo, params: params, responseFields: responseFields, exclude: exclude, groupId: groupId, storeId: storeId, customerListId: customerListId, avail: avail, findValue: findValue, findWhere: findWhere, sortBy: sortBy, sortDirection: sortDirection, ids: ids, sinceId: sinceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     customer.list
     - GET /customer.list.json
     - Get list of customers from store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter createdFrom: (query) Retrieve entities from their creation date (optional)
     - parameter createdTo: (query) Retrieve entities to their creation date (optional)
     - parameter modifiedFrom: (query) Retrieve entities from their modification date (optional)
     - parameter modifiedTo: (query) Retrieve entities to their modification date (optional)
     - parameter params: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "id,email,first_name,last_name")
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional)
     - parameter exclude: (query) Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
     - parameter groupId: (query) Customer group_id (optional)
     - parameter storeId: (query) Retrieves customers specified by store id (optional)
     - parameter customerListId: (query) The numeric ID of the customer list in Demandware. (optional)
     - parameter avail: (query) Defines category&#39;s visibility status (optional, default to true)
     - parameter findValue: (query) Entity search that is specified by some value (optional)
     - parameter findWhere: (query) Customer search that is specified by field (optional)
     - parameter sortBy: (query) Set field to sort by (optional, default to "created_time")
     - parameter sortDirection: (query) Set sorting direction (optional, default to "asc")
     - parameter ids: (query) Retrieves customers specified by ids (optional)
     - parameter sinceId: (query) Retrieve entities starting from the specified id. (optional)
     - returns: RequestBuilder<ModelResponseCustomerList> 
     */
    open class func customerListWithRequestBuilder(pageCursor: String? = nil, start: Int? = nil, count: Int? = nil, createdFrom: String? = nil, createdTo: String? = nil, modifiedFrom: String? = nil, modifiedTo: String? = nil, params: String? = nil, responseFields: String? = nil, exclude: String? = nil, groupId: String? = nil, storeId: String? = nil, customerListId: String? = nil, avail: Bool? = nil, findValue: String? = nil, findWhere: String? = nil, sortBy: String? = nil, sortDirection: String? = nil, ids: String? = nil, sinceId: String? = nil) -> RequestBuilder<ModelResponseCustomerList> {
        let localVariablePath = "/customer.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "created_from": (wrappedValue: createdFrom?.encodeToJSON(), isExplode: true),
            "created_to": (wrappedValue: createdTo?.encodeToJSON(), isExplode: true),
            "modified_from": (wrappedValue: modifiedFrom?.encodeToJSON(), isExplode: true),
            "modified_to": (wrappedValue: modifiedTo?.encodeToJSON(), isExplode: true),
            "params": (wrappedValue: params?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: true),
            "group_id": (wrappedValue: groupId?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "customer_list_id": (wrappedValue: customerListId?.encodeToJSON(), isExplode: true),
            "avail": (wrappedValue: avail?.encodeToJSON(), isExplode: true),
            "find_value": (wrappedValue: findValue?.encodeToJSON(), isExplode: true),
            "find_where": (wrappedValue: findWhere?.encodeToJSON(), isExplode: true),
            "sort_by": (wrappedValue: sortBy?.encodeToJSON(), isExplode: true),
            "sort_direction": (wrappedValue: sortDirection?.encodeToJSON(), isExplode: true),
            "ids": (wrappedValue: ids?.encodeToJSON(), isExplode: true),
            "since_id": (wrappedValue: sinceId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseCustomerList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     customer.update
     
     - parameter customerUpdate: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerUpdate(customerUpdate: CustomerUpdate, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccountConfigUpdate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return customerUpdateWithRequestBuilder(customerUpdate: customerUpdate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     customer.update
     - PUT /customer.update.json
     - Update information of customer in store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter customerUpdate: (body)  
     - returns: RequestBuilder<AccountConfigUpdate200Response> 
     */
    open class func customerUpdateWithRequestBuilder(customerUpdate: CustomerUpdate) -> RequestBuilder<AccountConfigUpdate200Response> {
        let localVariablePath = "/customer.update.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: customerUpdate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountConfigUpdate200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     customer.wishlist.list
     
     - parameter customerId: (query) Retrieves orders specified by customer id 
     - parameter id: (query) Entity id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "{return_code,return_message,pagination,result}")
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func customerWishlistList(customerId: String, id: String? = nil, storeId: String? = nil, start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, responseFields: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ModelResponseCustomerWishlistList?, _ error: Error?) -> Void)) -> RequestTask {
        return customerWishlistListWithRequestBuilder(customerId: customerId, id: id, storeId: storeId, start: start, count: count, pageCursor: pageCursor, responseFields: responseFields).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     customer.wishlist.list
     - GET /customer.wishlist.list.json
     - Get a Wish List of customer from the store.
     - API Key:
       - type: apiKey x-store-key (HEADER)
       - name: StoreKeyAuth
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: ApiKeyAuth
     - parameter customerId: (query) Retrieves orders specified by customer id 
     - parameter id: (query) Entity id (optional)
     - parameter storeId: (query) Store Id (optional)
     - parameter start: (query) This parameter sets the number from which you want to get entities (optional, default to 0)
     - parameter count: (query) This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
     - parameter pageCursor: (query) Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
     - parameter responseFields: (query) Set this parameter in order to choose which entity fields you want to retrieve (optional, default to "{return_code,return_message,pagination,result}")
     - returns: RequestBuilder<ModelResponseCustomerWishlistList> 
     */
    open class func customerWishlistListWithRequestBuilder(customerId: String, id: String? = nil, storeId: String? = nil, start: Int? = nil, count: Int? = nil, pageCursor: String? = nil, responseFields: String? = nil) -> RequestBuilder<ModelResponseCustomerWishlistList> {
        let localVariablePath = "/customer.wishlist.list.json"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "customer_id": (wrappedValue: customerId.encodeToJSON(), isExplode: true),
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
            "store_id": (wrappedValue: storeId?.encodeToJSON(), isExplode: true),
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "page_cursor": (wrappedValue: pageCursor?.encodeToJSON(), isExplode: true),
            "response_fields": (wrappedValue: responseFields?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelResponseCustomerWishlistList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
