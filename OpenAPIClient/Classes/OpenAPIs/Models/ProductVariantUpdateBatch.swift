//
// ProductVariantUpdateBatch.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProductVariantUpdateBatch: Codable, JSONEncodable, Hashable {

    public enum NestedItemsUpdateBehaviour: String, Codable, CaseIterable {
        case replace = "replace"
        case merge = "merge"
    }
    public static let payloadRule = ArrayRule(minItems: 1, maxItems: 250, uniqueItems: false)
    /**  Determines how updates to nested items should be handled.<hr><div style=\"font-style:normal\">  Values description:  <div style=\"margin-left: 2%; padding-top: 2%\">    <div style=\"font-size:85%\">      <b>  replace</b>: This option indicates that the nested items should be completely replaced with the new data provided. </br>      <b>  merge</b>: With this option, updates to nested items are merged with the existing data. </br>    </div>  </div></div> */
    public var nestedItemsUpdateBehaviour: NestedItemsUpdateBehaviour? = .replace
    public var clearCache: Bool? = false
    public var reindex: Bool? = false
    /** Contains an array of product objects. The list of properties may vary depending on the specific platform. */
    public var payload: [ProductVariantUpdateBatchPayloadInner]

    public init(nestedItemsUpdateBehaviour: NestedItemsUpdateBehaviour? = .replace, clearCache: Bool? = false, reindex: Bool? = false, payload: [ProductVariantUpdateBatchPayloadInner]) {
        self.nestedItemsUpdateBehaviour = nestedItemsUpdateBehaviour
        self.clearCache = clearCache
        self.reindex = reindex
        self.payload = payload
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case nestedItemsUpdateBehaviour = "nested_items_update_behaviour"
        case clearCache = "clear_cache"
        case reindex
        case payload
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(nestedItemsUpdateBehaviour, forKey: .nestedItemsUpdateBehaviour)
        try container.encodeIfPresent(clearCache, forKey: .clearCache)
        try container.encodeIfPresent(reindex, forKey: .reindex)
        try container.encode(payload, forKey: .payload)
    }
}

