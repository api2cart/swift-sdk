//
// OrderItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderItem: Codable, JSONEncodable, Hashable {

    public var productId: String?
    public var orderProductId: String?
    public var model: String?
    public var name: String?
    public var price: Double?
    public var priceIncTax: Double?
    public var quantity: Double?
    public var discountAmount: Double?
    public var totalPrice: Double?
    public var taxPercent: Double?
    public var taxValue: Double?
    public var taxValueAfterDiscount: Double?
    public var options: [OrderItemOption]?
    public var variantId: String?
    public var weightUnit: String?
    public var weight: Double?
    public var barcode: String?
    public var parentOrderProductId: String?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(productId: String? = nil, orderProductId: String? = nil, model: String? = nil, name: String? = nil, price: Double? = nil, priceIncTax: Double? = nil, quantity: Double? = nil, discountAmount: Double? = nil, totalPrice: Double? = nil, taxPercent: Double? = nil, taxValue: Double? = nil, taxValueAfterDiscount: Double? = nil, options: [OrderItemOption]? = nil, variantId: String? = nil, weightUnit: String? = nil, weight: Double? = nil, barcode: String? = nil, parentOrderProductId: String? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.productId = productId
        self.orderProductId = orderProductId
        self.model = model
        self.name = name
        self.price = price
        self.priceIncTax = priceIncTax
        self.quantity = quantity
        self.discountAmount = discountAmount
        self.totalPrice = totalPrice
        self.taxPercent = taxPercent
        self.taxValue = taxValue
        self.taxValueAfterDiscount = taxValueAfterDiscount
        self.options = options
        self.variantId = variantId
        self.weightUnit = weightUnit
        self.weight = weight
        self.barcode = barcode
        self.parentOrderProductId = parentOrderProductId
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case productId = "product_id"
        case orderProductId = "order_product_id"
        case model
        case name
        case price
        case priceIncTax = "price_inc_tax"
        case quantity
        case discountAmount = "discount_amount"
        case totalPrice = "total_price"
        case taxPercent = "tax_percent"
        case taxValue = "tax_value"
        case taxValueAfterDiscount = "tax_value_after_discount"
        case options
        case variantId = "variant_id"
        case weightUnit = "weight_unit"
        case weight
        case barcode
        case parentOrderProductId = "parent_order_product_id"
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(orderProductId, forKey: .orderProductId)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(priceIncTax, forKey: .priceIncTax)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(discountAmount, forKey: .discountAmount)
        try container.encodeIfPresent(totalPrice, forKey: .totalPrice)
        try container.encodeIfPresent(taxPercent, forKey: .taxPercent)
        try container.encodeIfPresent(taxValue, forKey: .taxValue)
        try container.encodeIfPresent(taxValueAfterDiscount, forKey: .taxValueAfterDiscount)
        try container.encodeIfPresent(options, forKey: .options)
        try container.encodeIfPresent(variantId, forKey: .variantId)
        try container.encodeIfPresent(weightUnit, forKey: .weightUnit)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(barcode, forKey: .barcode)
        try container.encodeIfPresent(parentOrderProductId, forKey: .parentOrderProductId)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

