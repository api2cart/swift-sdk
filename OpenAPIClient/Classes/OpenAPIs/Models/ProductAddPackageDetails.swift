//
// ProductAddPackageDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** If the seller is subscribed to \&quot;Business Policies\&quot;, use the seller_profiles instead of the shipping_details, payment_methods and return_accepted params.&lt;hr&gt;&lt;div style&#x3D;\&quot;font-style:normal\&quot;&gt;Param structure:&lt;div style&#x3D;\&quot;margin-left: 2%;\&quot;&gt;&lt;code style&#x3D;\&quot;padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\&quot;&gt;package_details[&lt;b&gt;measure_unit&lt;/b&gt;] &#x3D; string&lt;/br&gt; Allowed measure_unit values: [English or Metric] &lt;/br&gt; Default: Metric&lt;/br&gt;package_details[&lt;b&gt;weigh_unit&lt;/b&gt;] &#x3D; string&lt;/br&gt; Allowed weigh_unit values: [kg, g, lbs, oz]&lt;/br&gt;package_details[&lt;b&gt;package_depth&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;package_length&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;package_width&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;weight_major&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;weight_minor&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;package_details[&lt;b&gt;shipping_package&lt;/b&gt;] &#x3D; string&lt;/br&gt; See cart.info method, param &#x60;eBay_shipping_package_details&#x60;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; */
public struct ProductAddPackageDetails: Codable, JSONEncodable, Hashable {

    public var measureUnit: String?
    public var weighUnit: String?
    public var packageDepth: Double?
    public var packageLength: Double?
    public var packageWidth: Double?
    public var weightMajor: Double?
    public var weightMinor: Double?
    public var shippingPackage: String?

    public init(measureUnit: String? = nil, weighUnit: String? = nil, packageDepth: Double? = nil, packageLength: Double? = nil, packageWidth: Double? = nil, weightMajor: Double? = nil, weightMinor: Double? = nil, shippingPackage: String? = nil) {
        self.measureUnit = measureUnit
        self.weighUnit = weighUnit
        self.packageDepth = packageDepth
        self.packageLength = packageLength
        self.packageWidth = packageWidth
        self.weightMajor = weightMajor
        self.weightMinor = weightMinor
        self.shippingPackage = shippingPackage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case measureUnit = "measure_unit"
        case weighUnit = "weigh_unit"
        case packageDepth = "package_depth"
        case packageLength = "package_length"
        case packageWidth = "package_width"
        case weightMajor = "weight_major"
        case weightMinor = "weight_minor"
        case shippingPackage = "shipping_package"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(measureUnit, forKey: .measureUnit)
        try container.encodeIfPresent(weighUnit, forKey: .weighUnit)
        try container.encodeIfPresent(packageDepth, forKey: .packageDepth)
        try container.encodeIfPresent(packageLength, forKey: .packageLength)
        try container.encodeIfPresent(packageWidth, forKey: .packageWidth)
        try container.encodeIfPresent(weightMajor, forKey: .weightMajor)
        try container.encodeIfPresent(weightMinor, forKey: .weightMinor)
        try container.encodeIfPresent(shippingPackage, forKey: .shippingPackage)
    }
}

