//
// OrderPreestimateShippingList.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderPreestimateShippingList: Codable, JSONEncodable, Hashable {

    /** Store Id */
    public var storeId: String?
    /** This parameter is used for selecting a warehouse where you need to set/modify a product quantity. */
    public var warehouseId: String?
    /** Retrieves orders specified by customer email */
    public var customerEmail: String?
    /** Retrieves orders specified by customer id */
    public var customerId: String?
    /** Specifies first shipping address */
    public var shippAddress1: String?
    /** Specifies shipping city */
    public var shippCity: String?
    /** Specifies shipping postcode */
    public var shippPostcode: String?
    /** Specifies shipping state code */
    public var shippState: String?
    /** Specifies shipping country code */
    public var shippCountry: String
    /** Set this parameter in order to choose which entity fields you want to retrieve */
    public var params: String? = "force_all"
    /** Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter `params` equal force_all */
    public var exclude: String?
    public var orderItem: [OrderPreestimateShippingListOrderItemInner]

    public init(storeId: String? = nil, warehouseId: String? = nil, customerEmail: String? = nil, customerId: String? = nil, shippAddress1: String? = nil, shippCity: String? = nil, shippPostcode: String? = nil, shippState: String? = nil, shippCountry: String, params: String? = "force_all", exclude: String? = nil, orderItem: [OrderPreestimateShippingListOrderItemInner]) {
        self.storeId = storeId
        self.warehouseId = warehouseId
        self.customerEmail = customerEmail
        self.customerId = customerId
        self.shippAddress1 = shippAddress1
        self.shippCity = shippCity
        self.shippPostcode = shippPostcode
        self.shippState = shippState
        self.shippCountry = shippCountry
        self.params = params
        self.exclude = exclude
        self.orderItem = orderItem
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case storeId = "store_id"
        case warehouseId = "warehouse_id"
        case customerEmail = "customer_email"
        case customerId = "customer_id"
        case shippAddress1 = "shipp_address_1"
        case shippCity = "shipp_city"
        case shippPostcode = "shipp_postcode"
        case shippState = "shipp_state"
        case shippCountry = "shipp_country"
        case params
        case exclude
        case orderItem = "order_item"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encodeIfPresent(warehouseId, forKey: .warehouseId)
        try container.encodeIfPresent(customerEmail, forKey: .customerEmail)
        try container.encodeIfPresent(customerId, forKey: .customerId)
        try container.encodeIfPresent(shippAddress1, forKey: .shippAddress1)
        try container.encodeIfPresent(shippCity, forKey: .shippCity)
        try container.encodeIfPresent(shippPostcode, forKey: .shippPostcode)
        try container.encodeIfPresent(shippState, forKey: .shippState)
        try container.encode(shippCountry, forKey: .shippCountry)
        try container.encodeIfPresent(params, forKey: .params)
        try container.encodeIfPresent(exclude, forKey: .exclude)
        try container.encode(orderItem, forKey: .orderItem)
    }
}

