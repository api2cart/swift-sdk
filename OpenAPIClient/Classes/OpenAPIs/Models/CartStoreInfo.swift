//
// CartStoreInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CartStoreInfo: Codable, JSONEncodable, Hashable {

    public var storeId: String?
    public var name: String?
    public var language: String?
    public var storeLanguages: [Language]?
    public var currency: Currency?
    public var storeCurrencies: [Currency]?
    public var timezone: String?
    public var country: String?
    public var rootCategoryId: String?
    public var multiStoreUrl: String?
    public var active: Bool?
    public var weightUnit: String?
    public var dimensionUnit: String?
    public var pricesIncludeTax: Bool?
    public var carrierInfo: [Carrier]?
    public var storeOwnerInfo: Info?
    public var defaultWarehouseId: String?
    public var channels: [CartChannel]?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(storeId: String? = nil, name: String? = nil, language: String? = nil, storeLanguages: [Language]? = nil, currency: Currency? = nil, storeCurrencies: [Currency]? = nil, timezone: String? = nil, country: String? = nil, rootCategoryId: String? = nil, multiStoreUrl: String? = nil, active: Bool? = nil, weightUnit: String? = nil, dimensionUnit: String? = nil, pricesIncludeTax: Bool? = nil, carrierInfo: [Carrier]? = nil, storeOwnerInfo: Info? = nil, defaultWarehouseId: String? = nil, channels: [CartChannel]? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.storeId = storeId
        self.name = name
        self.language = language
        self.storeLanguages = storeLanguages
        self.currency = currency
        self.storeCurrencies = storeCurrencies
        self.timezone = timezone
        self.country = country
        self.rootCategoryId = rootCategoryId
        self.multiStoreUrl = multiStoreUrl
        self.active = active
        self.weightUnit = weightUnit
        self.dimensionUnit = dimensionUnit
        self.pricesIncludeTax = pricesIncludeTax
        self.carrierInfo = carrierInfo
        self.storeOwnerInfo = storeOwnerInfo
        self.defaultWarehouseId = defaultWarehouseId
        self.channels = channels
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case storeId = "store_id"
        case name
        case language
        case storeLanguages = "store_languages"
        case currency
        case storeCurrencies = "store_currencies"
        case timezone
        case country
        case rootCategoryId = "root_category_id"
        case multiStoreUrl = "multi_store_url"
        case active
        case weightUnit = "weight_unit"
        case dimensionUnit = "dimension_unit"
        case pricesIncludeTax = "prices_include_tax"
        case carrierInfo = "carrier_info"
        case storeOwnerInfo = "store_owner_info"
        case defaultWarehouseId = "default_warehouse_id"
        case channels
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(storeLanguages, forKey: .storeLanguages)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(storeCurrencies, forKey: .storeCurrencies)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(rootCategoryId, forKey: .rootCategoryId)
        try container.encodeIfPresent(multiStoreUrl, forKey: .multiStoreUrl)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(weightUnit, forKey: .weightUnit)
        try container.encodeIfPresent(dimensionUnit, forKey: .dimensionUnit)
        try container.encodeIfPresent(pricesIncludeTax, forKey: .pricesIncludeTax)
        try container.encodeIfPresent(carrierInfo, forKey: .carrierInfo)
        try container.encodeIfPresent(storeOwnerInfo, forKey: .storeOwnerInfo)
        try container.encodeIfPresent(defaultWarehouseId, forKey: .defaultWarehouseId)
        try container.encodeIfPresent(channels, forKey: .channels)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

