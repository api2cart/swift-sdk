//
// OrderReturnAddOrderProductsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderReturnAddOrderProductsInner: Codable, JSONEncodable, Hashable {

    /** Defines which products from the order should be returned */
    public var orderProductId: String
    /** Defines how many product units from the order should be returned */
    public var orderProductQuantity: Int
    /** Defines the ID of the return reason */
    public var orderProductReasonId: String
    /** Defines the ID of the return action */
    public var orderProductActionId: String
    /** Defines the customer's comment for return */
    public var orderProductCustomerComment: String?
    /** Defines handling status */
    public var orderProductHandlingStatus: String?
    /** Defines the product condition */
    public var orderProductCondition: String?
    /** Defines return reason */
    public var orderProductReason: String?
    /** Defines product return status */
    public var orderProductStatus: String?

    public init(orderProductId: String, orderProductQuantity: Int, orderProductReasonId: String, orderProductActionId: String, orderProductCustomerComment: String? = nil, orderProductHandlingStatus: String? = nil, orderProductCondition: String? = nil, orderProductReason: String? = nil, orderProductStatus: String? = nil) {
        self.orderProductId = orderProductId
        self.orderProductQuantity = orderProductQuantity
        self.orderProductReasonId = orderProductReasonId
        self.orderProductActionId = orderProductActionId
        self.orderProductCustomerComment = orderProductCustomerComment
        self.orderProductHandlingStatus = orderProductHandlingStatus
        self.orderProductCondition = orderProductCondition
        self.orderProductReason = orderProductReason
        self.orderProductStatus = orderProductStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case orderProductId = "order_product_id"
        case orderProductQuantity = "order_product_quantity"
        case orderProductReasonId = "order_product_reason_id"
        case orderProductActionId = "order_product_action_id"
        case orderProductCustomerComment = "order_product_customer_comment"
        case orderProductHandlingStatus = "order_product_handling_status"
        case orderProductCondition = "order_product_condition"
        case orderProductReason = "order_product_reason"
        case orderProductStatus = "order_product_status"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(orderProductId, forKey: .orderProductId)
        try container.encode(orderProductQuantity, forKey: .orderProductQuantity)
        try container.encode(orderProductReasonId, forKey: .orderProductReasonId)
        try container.encode(orderProductActionId, forKey: .orderProductActionId)
        try container.encodeIfPresent(orderProductCustomerComment, forKey: .orderProductCustomerComment)
        try container.encodeIfPresent(orderProductHandlingStatus, forKey: .orderProductHandlingStatus)
        try container.encodeIfPresent(orderProductCondition, forKey: .orderProductCondition)
        try container.encodeIfPresent(orderProductReason, forKey: .orderProductReason)
        try container.encodeIfPresent(orderProductStatus, forKey: .orderProductStatus)
    }
}

