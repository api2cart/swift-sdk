//
// MarketplaceProduct.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MarketplaceProduct: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var type: String?
    public var uAsin: String?
    public var uEan: String?
    public var uGtin: String?
    public var uIsbn: String?
    public var uMpn: String?
    public var uUpc: String?
    public var name: String?
    public var description: String?
    public var url: String?
    public var price: Double?
    public var images: [Image]?
    public var productOptions: [ProductOption]?
    public var manufacturer: String?
    public var brand: String?
    public var weight: Double?
    public var weightUnit: String?
    public var dimensionsUnit: String?
    public var width: Double?
    public var height: Double?
    public var length: Double?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, type: String? = nil, uAsin: String? = nil, uEan: String? = nil, uGtin: String? = nil, uIsbn: String? = nil, uMpn: String? = nil, uUpc: String? = nil, name: String? = nil, description: String? = nil, url: String? = nil, price: Double? = nil, images: [Image]? = nil, productOptions: [ProductOption]? = nil, manufacturer: String? = nil, brand: String? = nil, weight: Double? = nil, weightUnit: String? = nil, dimensionsUnit: String? = nil, width: Double? = nil, height: Double? = nil, length: Double? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.type = type
        self.uAsin = uAsin
        self.uEan = uEan
        self.uGtin = uGtin
        self.uIsbn = uIsbn
        self.uMpn = uMpn
        self.uUpc = uUpc
        self.name = name
        self.description = description
        self.url = url
        self.price = price
        self.images = images
        self.productOptions = productOptions
        self.manufacturer = manufacturer
        self.brand = brand
        self.weight = weight
        self.weightUnit = weightUnit
        self.dimensionsUnit = dimensionsUnit
        self.width = width
        self.height = height
        self.length = length
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case uAsin = "u_asin"
        case uEan = "u_ean"
        case uGtin = "u_gtin"
        case uIsbn = "u_isbn"
        case uMpn = "u_mpn"
        case uUpc = "u_upc"
        case name
        case description
        case url
        case price
        case images
        case productOptions = "product_options"
        case manufacturer
        case brand
        case weight
        case weightUnit = "weight_unit"
        case dimensionsUnit = "dimensions_unit"
        case width
        case height
        case length
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(uAsin, forKey: .uAsin)
        try container.encodeIfPresent(uEan, forKey: .uEan)
        try container.encodeIfPresent(uGtin, forKey: .uGtin)
        try container.encodeIfPresent(uIsbn, forKey: .uIsbn)
        try container.encodeIfPresent(uMpn, forKey: .uMpn)
        try container.encodeIfPresent(uUpc, forKey: .uUpc)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(productOptions, forKey: .productOptions)
        try container.encodeIfPresent(manufacturer, forKey: .manufacturer)
        try container.encodeIfPresent(brand, forKey: .brand)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(weightUnit, forKey: .weightUnit)
        try container.encodeIfPresent(dimensionsUnit, forKey: .dimensionsUnit)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(length, forKey: .length)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension MarketplaceProduct: Identifiable {}
