//
// OrderReturnAdd.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderReturnAdd: Codable, JSONEncodable, Hashable {

    /** Defines the order id */
    public var orderId: String?
    /** Store Id */
    public var storeId: String?
    /** Defines return request status */
    public var returnStatusId: String
    /** Defines return request action */
    public var returnActionId: String
    /** Defines return request reason */
    public var returnReasonId: String
    /** Defines return request reason */
    public var returnReason: String?
    /** Boolean, whether or not to add the line items back to the store inventory. */
    public var itemRestock: Bool? = false
    /** Specifies staff note */
    public var staffNote: String?
    /** Specifies return comment */
    public var comment: String?
    /** Send notifications to customer after order was created */
    public var sendNotifications: Bool? = false
    /** Defines return reject reason */
    public var rejectReason: String?
    public var orderProducts: [OrderReturnAddOrderProductsInner]

    public init(orderId: String? = nil, storeId: String? = nil, returnStatusId: String, returnActionId: String, returnReasonId: String, returnReason: String? = nil, itemRestock: Bool? = false, staffNote: String? = nil, comment: String? = nil, sendNotifications: Bool? = false, rejectReason: String? = nil, orderProducts: [OrderReturnAddOrderProductsInner]) {
        self.orderId = orderId
        self.storeId = storeId
        self.returnStatusId = returnStatusId
        self.returnActionId = returnActionId
        self.returnReasonId = returnReasonId
        self.returnReason = returnReason
        self.itemRestock = itemRestock
        self.staffNote = staffNote
        self.comment = comment
        self.sendNotifications = sendNotifications
        self.rejectReason = rejectReason
        self.orderProducts = orderProducts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case orderId = "order_id"
        case storeId = "store_id"
        case returnStatusId = "return_status_id"
        case returnActionId = "return_action_id"
        case returnReasonId = "return_reason_id"
        case returnReason = "return_reason"
        case itemRestock = "item_restock"
        case staffNote = "staff_note"
        case comment
        case sendNotifications = "send_notifications"
        case rejectReason = "reject_reason"
        case orderProducts = "order_products"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encode(returnStatusId, forKey: .returnStatusId)
        try container.encode(returnActionId, forKey: .returnActionId)
        try container.encode(returnReasonId, forKey: .returnReasonId)
        try container.encodeIfPresent(returnReason, forKey: .returnReason)
        try container.encodeIfPresent(itemRestock, forKey: .itemRestock)
        try container.encodeIfPresent(staffNote, forKey: .staffNote)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(sendNotifications, forKey: .sendNotifications)
        try container.encodeIfPresent(rejectReason, forKey: .rejectReason)
        try container.encode(orderProducts, forKey: .orderProducts)
    }
}

