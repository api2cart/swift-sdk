//
// CatalogPriceRuleAction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CatalogPriceRuleAction: Codable, JSONEncodable, Hashable {

    public var scope: String?
    public var applyTo: String?
    public var type: String?
    public var quantity: Double?
    public var value: Double?
    public var currencyCode: String?
    public var includeTax: Bool?
    public var conditions: [CouponCondition]?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(scope: String? = nil, applyTo: String? = nil, type: String? = nil, quantity: Double? = nil, value: Double? = nil, currencyCode: String? = nil, includeTax: Bool? = nil, conditions: [CouponCondition]? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.scope = scope
        self.applyTo = applyTo
        self.type = type
        self.quantity = quantity
        self.value = value
        self.currencyCode = currencyCode
        self.includeTax = includeTax
        self.conditions = conditions
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case scope
        case applyTo = "apply_to"
        case type
        case quantity
        case value
        case currencyCode = "currency_code"
        case includeTax = "include_tax"
        case conditions
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(applyTo, forKey: .applyTo)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(currencyCode, forKey: .currencyCode)
        try container.encodeIfPresent(includeTax, forKey: .includeTax)
        try container.encodeIfPresent(conditions, forKey: .conditions)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

