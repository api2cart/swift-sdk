//
// CatalogPriceRule.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CatalogPriceRule: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var gid: String?
    public var type: String?
    public var name: String?
    public var description: String?
    public var shortDescription: String?
    public var avail: Bool?
    public var actions: [CatalogPriceRuleAction]?
    public var createdTime: A2CDateTime?
    public var dateStart: A2CDateTime?
    public var dateEnd: A2CDateTime?
    public var usageCount: Double?
    public var conditions: [CouponCondition]?
    public var usesPerOrderLimit: Int?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, gid: String? = nil, type: String? = nil, name: String? = nil, description: String? = nil, shortDescription: String? = nil, avail: Bool? = nil, actions: [CatalogPriceRuleAction]? = nil, createdTime: A2CDateTime? = nil, dateStart: A2CDateTime? = nil, dateEnd: A2CDateTime? = nil, usageCount: Double? = nil, conditions: [CouponCondition]? = nil, usesPerOrderLimit: Int? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.gid = gid
        self.type = type
        self.name = name
        self.description = description
        self.shortDescription = shortDescription
        self.avail = avail
        self.actions = actions
        self.createdTime = createdTime
        self.dateStart = dateStart
        self.dateEnd = dateEnd
        self.usageCount = usageCount
        self.conditions = conditions
        self.usesPerOrderLimit = usesPerOrderLimit
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case gid
        case type
        case name
        case description
        case shortDescription = "short_description"
        case avail
        case actions
        case createdTime = "created_time"
        case dateStart = "date_start"
        case dateEnd = "date_end"
        case usageCount = "usage_count"
        case conditions
        case usesPerOrderLimit = "uses_per_order_limit"
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(gid, forKey: .gid)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(shortDescription, forKey: .shortDescription)
        try container.encodeIfPresent(avail, forKey: .avail)
        try container.encodeIfPresent(actions, forKey: .actions)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(dateStart, forKey: .dateStart)
        try container.encodeIfPresent(dateEnd, forKey: .dateEnd)
        try container.encodeIfPresent(usageCount, forKey: .usageCount)
        try container.encodeIfPresent(conditions, forKey: .conditions)
        try container.encodeIfPresent(usesPerOrderLimit, forKey: .usesPerOrderLimit)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension CatalogPriceRule: Identifiable {}
