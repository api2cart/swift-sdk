//
// GiftCard.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GiftCard: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var code: String?
    public var name: String?
    public var type: String?
    public var currencyCode: String?
    public var amount: Double?
    public var initialAmount: Double?
    public var status: String?
    public var createdAt: String?
    public var availTo: String?
    public var freeProductIds: String?
    public var message: String?
    public var issuerEmail: String?
    public var recipientEmail: String?
    public var issuerName: String?
    public var recipientName: String?
    public var usageHistory: [CouponHistory]?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, code: String? = nil, name: String? = nil, type: String? = nil, currencyCode: String? = nil, amount: Double? = nil, initialAmount: Double? = nil, status: String? = nil, createdAt: String? = nil, availTo: String? = nil, freeProductIds: String? = nil, message: String? = nil, issuerEmail: String? = nil, recipientEmail: String? = nil, issuerName: String? = nil, recipientName: String? = nil, usageHistory: [CouponHistory]? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.code = code
        self.name = name
        self.type = type
        self.currencyCode = currencyCode
        self.amount = amount
        self.initialAmount = initialAmount
        self.status = status
        self.createdAt = createdAt
        self.availTo = availTo
        self.freeProductIds = freeProductIds
        self.message = message
        self.issuerEmail = issuerEmail
        self.recipientEmail = recipientEmail
        self.issuerName = issuerName
        self.recipientName = recipientName
        self.usageHistory = usageHistory
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case code
        case name
        case type
        case currencyCode = "currency_code"
        case amount
        case initialAmount = "initial_amount"
        case status
        case createdAt = "created_at"
        case availTo = "avail_to"
        case freeProductIds = "free_product_ids"
        case message
        case issuerEmail = "issuer_email"
        case recipientEmail = "recipient_email"
        case issuerName = "issuer_name"
        case recipientName = "recipient_name"
        case usageHistory = "usage_history"
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(currencyCode, forKey: .currencyCode)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(initialAmount, forKey: .initialAmount)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(availTo, forKey: .availTo)
        try container.encodeIfPresent(freeProductIds, forKey: .freeProductIds)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(issuerEmail, forKey: .issuerEmail)
        try container.encodeIfPresent(recipientEmail, forKey: .recipientEmail)
        try container.encodeIfPresent(issuerName, forKey: .issuerName)
        try container.encodeIfPresent(recipientName, forKey: .recipientName)
        try container.encodeIfPresent(usageHistory, forKey: .usageHistory)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension GiftCard: Identifiable {}
