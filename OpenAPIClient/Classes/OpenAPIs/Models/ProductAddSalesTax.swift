//
// ProductAddSalesTax.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Percent of an item&#39;s price to be charged as the sales tax for the order. Look at cart.info method response for allowed values.&lt;hr&gt;&lt;div style&#x3D;\&quot;font-style:normal\&quot;&gt;Param structure:&lt;div style&#x3D;\&quot;margin-left: 2%;\&quot;&gt;&lt;code style&#x3D;\&quot;padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\&quot;&gt;sales_tax[&lt;b&gt;tax_percent&lt;/b&gt;] &#x3D; decimal (##.###)&lt;/br&gt;sales_tax[&lt;b&gt;tax_state&lt;/b&gt;] &#x3D; string&lt;/br&gt;sales_tax[&lt;b&gt;shipping_inc_in_tax&lt;/b&gt;] &#x3D; bool&lt;/br&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt; */
public struct ProductAddSalesTax: Codable, JSONEncodable, Hashable {

    public var taxPercent: Double?
    public var taxState: String?
    public var shippingIncInTax: Bool?

    public init(taxPercent: Double? = nil, taxState: String? = nil, shippingIncInTax: Bool? = nil) {
        self.taxPercent = taxPercent
        self.taxState = taxState
        self.shippingIncInTax = shippingIncInTax
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case taxPercent = "tax_percent"
        case taxState = "tax_state"
        case shippingIncInTax = "shipping_inc_in_tax"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(taxPercent, forKey: .taxPercent)
        try container.encodeIfPresent(taxState, forKey: .taxState)
        try container.encodeIfPresent(shippingIncInTax, forKey: .shippingIncInTax)
    }
}

