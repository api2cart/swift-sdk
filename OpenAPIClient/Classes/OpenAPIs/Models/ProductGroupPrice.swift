//
// ProductGroupPrice.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProductGroupPrice: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var groupId: String?
    public var price: Double?
    public var storeId: String?
    public var quantity: Double?
    public var startTime: String?
    public var expireTime: String?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, groupId: String? = nil, price: Double? = nil, storeId: String? = nil, quantity: Double? = nil, startTime: String? = nil, expireTime: String? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.groupId = groupId
        self.price = price
        self.storeId = storeId
        self.quantity = quantity
        self.startTime = startTime
        self.expireTime = expireTime
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case groupId = "group_id"
        case price
        case storeId = "store_id"
        case quantity
        case startTime = "start_time"
        case expireTime = "expire_time"
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(expireTime, forKey: .expireTime)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ProductGroupPrice: Identifiable {}
