//
// CustomerUpdate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CustomerUpdate: Codable, JSONEncodable, Hashable {

    public static let consentsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    /** Entity id */
    public var id: String?
    /** Customer group_id */
    public var groupId: String?
    /** Groups that will be assigned to a customer */
    public var groupIds: String?
    /** Defines the group where the customer */
    public var group: String?
    /** Defines customer's email */
    public var email: String?
    /** Defines customer's phone number */
    public var phone: String?
    /** Defines customer's first name */
    public var firstName: String?
    /** Defines customer's last name */
    public var lastName: String?
    /** Defines customer's birthday */
    public var birthDay: String?
    /** Defines whether the newsletter subscription is available for the user */
    public var newsLetterSubscription: Bool?
    /** Defines consents to notifications */
    public var consents: [CustomerAddConsentsInner]?
    /** Customer tags */
    public var tags: String?
    /** Defines customer's gender */
    public var gender: String?
    /** Store Id */
    public var storeId: String?
    /** The customer note. */
    public var note: String?
    /** Defines customer's status */
    public var status: String?
    public var address: [CustomerUpdateAddressInner]?

    public init(id: String? = nil, groupId: String? = nil, groupIds: String? = nil, group: String? = nil, email: String? = nil, phone: String? = nil, firstName: String? = nil, lastName: String? = nil, birthDay: String? = nil, newsLetterSubscription: Bool? = nil, consents: [CustomerAddConsentsInner]? = nil, tags: String? = nil, gender: String? = nil, storeId: String? = nil, note: String? = nil, status: String? = nil, address: [CustomerUpdateAddressInner]? = nil) {
        self.id = id
        self.groupId = groupId
        self.groupIds = groupIds
        self.group = group
        self.email = email
        self.phone = phone
        self.firstName = firstName
        self.lastName = lastName
        self.birthDay = birthDay
        self.newsLetterSubscription = newsLetterSubscription
        self.consents = consents
        self.tags = tags
        self.gender = gender
        self.storeId = storeId
        self.note = note
        self.status = status
        self.address = address
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case groupId = "group_id"
        case groupIds = "group_ids"
        case group
        case email
        case phone
        case firstName = "first_name"
        case lastName = "last_name"
        case birthDay = "birth_day"
        case newsLetterSubscription = "news_letter_subscription"
        case consents
        case tags
        case gender
        case storeId = "store_id"
        case note
        case status
        case address
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(groupIds, forKey: .groupIds)
        try container.encodeIfPresent(group, forKey: .group)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(birthDay, forKey: .birthDay)
        try container.encodeIfPresent(newsLetterSubscription, forKey: .newsLetterSubscription)
        try container.encodeIfPresent(consents, forKey: .consents)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encodeIfPresent(note, forKey: .note)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(address, forKey: .address)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension CustomerUpdate: Identifiable {}
