//
// ProductOptionAdd.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProductOptionAdd: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case optionTypeSelect = "option_type_select"
        case optionTypeText = "option_type_text"
        case optionTypeRadio = "option_type_radio"
        case optionTypeCheckbox = "option_type_checkbox"
        case optionTypeTextarea = "option_type_textarea"
        case optionTypeReadonly = "option_type_readonly"
        case optionTypeMultiselect = "option_type_multiselect"
        case optionTypeMulticheckbox = "option_type_multicheckbox"
        case optionTypeFile = "option_type_file"
        case optionTypeDate = "option_type_date"
        case optionTypeDatetime = "option_type_datetime"
        case optionTypeTime = "option_type_time"
    }
    /** Defines option's name */
    public var name: String
    /** Defines option's type that has to be added */
    public var type: ModelType
    /** Defines product id where the option should be added */
    public var productId: String?
    /** Defines default option value that has to be added */
    public var defaultOptionValue: String?
    /** Defines option values that has to be added */
    public var optionValues: String?
    /** Defines option's description */
    public var description: String?
    /** Defines whether the option is available */
    public var avail: Bool? = true
    /** Sort number in the list */
    public var sortOrder: Int? = 0
    /** Defines if the option is required */
    public var _required: Bool? = false
    /** An array of option values.</b> */
    public var values: [ProductOptionAddValuesInner]?
    /** Is cache clear required */
    public var clearCache: Bool? = true

    public init(name: String, type: ModelType, productId: String? = nil, defaultOptionValue: String? = nil, optionValues: String? = nil, description: String? = nil, avail: Bool? = true, sortOrder: Int? = 0, _required: Bool? = false, values: [ProductOptionAddValuesInner]? = nil, clearCache: Bool? = true) {
        self.name = name
        self.type = type
        self.productId = productId
        self.defaultOptionValue = defaultOptionValue
        self.optionValues = optionValues
        self.description = description
        self.avail = avail
        self.sortOrder = sortOrder
        self._required = _required
        self.values = values
        self.clearCache = clearCache
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case type
        case productId = "product_id"
        case defaultOptionValue = "default_option_value"
        case optionValues = "option_values"
        case description
        case avail
        case sortOrder = "sort_order"
        case _required = "required"
        case values
        case clearCache = "clear_cache"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(defaultOptionValue, forKey: .defaultOptionValue)
        try container.encodeIfPresent(optionValues, forKey: .optionValues)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(avail, forKey: .avail)
        try container.encodeIfPresent(sortOrder, forKey: .sortOrder)
        try container.encodeIfPresent(_required, forKey: ._required)
        try container.encodeIfPresent(values, forKey: .values)
        try container.encodeIfPresent(clearCache, forKey: .clearCache)
    }
}

