//
// ProductGroupItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProductGroupItem: Codable, JSONEncodable, Hashable {

    public var childItemId: String?
    public var productId: String?
    public var defaultQtyInPack: String?
    public var isQtyInPackFixed: Bool?
    public var price: Double?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(childItemId: String? = nil, productId: String? = nil, defaultQtyInPack: String? = nil, isQtyInPackFixed: Bool? = nil, price: Double? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.childItemId = childItemId
        self.productId = productId
        self.defaultQtyInPack = defaultQtyInPack
        self.isQtyInPackFixed = isQtyInPackFixed
        self.price = price
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case childItemId = "child_item_id"
        case productId = "product_id"
        case defaultQtyInPack = "default_qty_in_pack"
        case isQtyInPackFixed = "is_qty_in_pack_fixed"
        case price
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(childItemId, forKey: .childItemId)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(defaultQtyInPack, forKey: .defaultQtyInPack)
        try container.encodeIfPresent(isQtyInPackFixed, forKey: .isQtyInPackFixed)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

