//
// ProductAdvancedPrice.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProductAdvancedPrice: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var value: Double?
    public var avail: Bool?
    public var groupId: String?
    public var quantityFrom: Double?
    public var startTime: A2CDateTime?
    public var expireTime: A2CDateTime?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, value: Double? = nil, avail: Bool? = nil, groupId: String? = nil, quantityFrom: Double? = nil, startTime: A2CDateTime? = nil, expireTime: A2CDateTime? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.value = value
        self.avail = avail
        self.groupId = groupId
        self.quantityFrom = quantityFrom
        self.startTime = startTime
        self.expireTime = expireTime
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case value
        case avail
        case groupId = "group_id"
        case quantityFrom = "quantity_from"
        case startTime = "start_time"
        case expireTime = "expire_time"
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(avail, forKey: .avail)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(quantityFrom, forKey: .quantityFrom)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(expireTime, forKey: .expireTime)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ProductAdvancedPrice: Identifiable {}
