//
// OrderStatusRefundItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderStatusRefundItem: Codable, JSONEncodable, Hashable {

    public var productId: String?
    public var variantId: String?
    public var orderProductId: String?
    public var qty: Double?
    public var refund: Double?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(productId: String? = nil, variantId: String? = nil, orderProductId: String? = nil, qty: Double? = nil, refund: Double? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.productId = productId
        self.variantId = variantId
        self.orderProductId = orderProductId
        self.qty = qty
        self.refund = refund
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case productId = "product_id"
        case variantId = "variant_id"
        case orderProductId = "order_product_id"
        case qty
        case refund
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(variantId, forKey: .variantId)
        try container.encodeIfPresent(orderProductId, forKey: .orderProductId)
        try container.encodeIfPresent(qty, forKey: .qty)
        try container.encodeIfPresent(refund, forKey: .refund)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

