//
// Coupon.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Coupon: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var code: String?
    public var codes: [CouponCode]?
    public var name: String?
    public var description: String?
    public var actions: [CouponAction]?
    public var dateStart: A2CDateTime?
    public var dateEnd: A2CDateTime?
    public var avail: Bool?
    public var priority: Int?
    public var usedTimes: Int?
    public var usageLimit: Int?
    public var usageLimitPerCustomer: Int?
    public var logicOperator: String?
    public var conditions: [CouponCondition]?
    public var usageHistory: [CouponHistory]?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, code: String? = nil, codes: [CouponCode]? = nil, name: String? = nil, description: String? = nil, actions: [CouponAction]? = nil, dateStart: A2CDateTime? = nil, dateEnd: A2CDateTime? = nil, avail: Bool? = nil, priority: Int? = nil, usedTimes: Int? = nil, usageLimit: Int? = nil, usageLimitPerCustomer: Int? = nil, logicOperator: String? = nil, conditions: [CouponCondition]? = nil, usageHistory: [CouponHistory]? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.code = code
        self.codes = codes
        self.name = name
        self.description = description
        self.actions = actions
        self.dateStart = dateStart
        self.dateEnd = dateEnd
        self.avail = avail
        self.priority = priority
        self.usedTimes = usedTimes
        self.usageLimit = usageLimit
        self.usageLimitPerCustomer = usageLimitPerCustomer
        self.logicOperator = logicOperator
        self.conditions = conditions
        self.usageHistory = usageHistory
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case code
        case codes
        case name
        case description
        case actions
        case dateStart = "date_start"
        case dateEnd = "date_end"
        case avail
        case priority
        case usedTimes = "used_times"
        case usageLimit = "usage_limit"
        case usageLimitPerCustomer = "usage_limit_per_customer"
        case logicOperator = "logic_operator"
        case conditions
        case usageHistory = "usage_history"
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(codes, forKey: .codes)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(actions, forKey: .actions)
        try container.encodeIfPresent(dateStart, forKey: .dateStart)
        try container.encodeIfPresent(dateEnd, forKey: .dateEnd)
        try container.encodeIfPresent(avail, forKey: .avail)
        try container.encodeIfPresent(priority, forKey: .priority)
        try container.encodeIfPresent(usedTimes, forKey: .usedTimes)
        try container.encodeIfPresent(usageLimit, forKey: .usageLimit)
        try container.encodeIfPresent(usageLimitPerCustomer, forKey: .usageLimitPerCustomer)
        try container.encodeIfPresent(logicOperator, forKey: .logicOperator)
        try container.encodeIfPresent(conditions, forKey: .conditions)
        try container.encodeIfPresent(usageHistory, forKey: .usageHistory)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Coupon: Identifiable {}
