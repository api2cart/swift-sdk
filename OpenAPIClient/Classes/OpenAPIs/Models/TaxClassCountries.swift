//
// TaxClassCountries.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TaxClassCountries: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var name: String?
    public var code: String?
    public var tax: Double?
    public var taxType: Int?
    public var states: [TaxClassStates]?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, name: String? = nil, code: String? = nil, tax: Double? = nil, taxType: Int? = nil, states: [TaxClassStates]? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.name = name
        self.code = code
        self.tax = tax
        self.taxType = taxType
        self.states = states
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case code
        case tax
        case taxType = "tax_type"
        case states
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(tax, forKey: .tax)
        try container.encodeIfPresent(taxType, forKey: .taxType)
        try container.encodeIfPresent(states, forKey: .states)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension TaxClassCountries: Identifiable {}
