//
// Subscriber.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Subscriber: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var customerId: String?
    public var email: String?
    public var subscribed: Bool?
    public var firstName: String?
    public var lastName: String?
    public var storesIds: [String]?
    public var createdTime: String?
    public var modifiedTime: String?
    public var langId: String?
    public var gender: String?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, customerId: String? = nil, email: String? = nil, subscribed: Bool? = nil, firstName: String? = nil, lastName: String? = nil, storesIds: [String]? = nil, createdTime: String? = nil, modifiedTime: String? = nil, langId: String? = nil, gender: String? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.customerId = customerId
        self.email = email
        self.subscribed = subscribed
        self.firstName = firstName
        self.lastName = lastName
        self.storesIds = storesIds
        self.createdTime = createdTime
        self.modifiedTime = modifiedTime
        self.langId = langId
        self.gender = gender
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case customerId = "customer_id"
        case email
        case subscribed
        case firstName = "first_name"
        case lastName = "last_name"
        case storesIds = "stores_ids"
        case createdTime = "created_time"
        case modifiedTime = "modified_time"
        case langId = "lang_id"
        case gender
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(customerId, forKey: .customerId)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(subscribed, forKey: .subscribed)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(storesIds, forKey: .storesIds)
        try container.encodeIfPresent(createdTime, forKey: .createdTime)
        try container.encodeIfPresent(modifiedTime, forKey: .modifiedTime)
        try container.encodeIfPresent(langId, forKey: .langId)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Subscriber: Identifiable {}
