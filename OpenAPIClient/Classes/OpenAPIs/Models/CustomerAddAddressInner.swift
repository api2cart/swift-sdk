//
// CustomerAddAddressInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CustomerAddAddressInner: Codable, JSONEncodable, Hashable {

    /** Specifies customer's address type */
    public var addressBookType: String?
    /** Specifies customer's first name in the address book */
    public var addressBookFirstName: String?
    /** Specifies customer's last name in the address book */
    public var addressBookLastName: String?
    /** Specifies customer's company name in the address book */
    public var addressBookCompany: String?
    /** Specifies customer's fax in the address book */
    public var addressBookFax: String?
    /** Specifies customer's phone number in the address book */
    public var addressBookPhone: String?
    /** Specifies customer's mobile phone number in the address book */
    public var addressBookPhoneMobile: String?
    /** Specifies customer's website in the address book */
    public var addressBookWebsite: String?
    /** Specifies customer's first address in the address book */
    public var addressBookAddress1: String?
    /** Specifies customer's second address in the address book */
    public var addressBookAddress2: String?
    /** Specifies customer's city in the address book */
    public var addressBookCity: String?
    /** ISO code or name of country */
    public var addressBookCountry: String?
    /** ISO code or name of state. */
    public var addressBookState: String?
    /** Specifies customer's postcode */
    public var addressBookPostcode: String?
    /** Specifies customer's gender */
    public var addressBookGender: String?
    /** Specifies customer's region */
    public var addressBookRegion: String?
    /** Defines whether the address is used by default */
    public var addressBookDefault: Bool?
    /** Add Tax Id */
    public var addressBookTaxId: String?
    /** The national ID card number of this person, or a unique tax identification number. */
    public var addressBookIdentificationNumber: String?
    /** Specifies customer's alias in the address book */
    public var addressBookAlias: String?

    public init(addressBookType: String? = nil, addressBookFirstName: String? = nil, addressBookLastName: String? = nil, addressBookCompany: String? = nil, addressBookFax: String? = nil, addressBookPhone: String? = nil, addressBookPhoneMobile: String? = nil, addressBookWebsite: String? = nil, addressBookAddress1: String? = nil, addressBookAddress2: String? = nil, addressBookCity: String? = nil, addressBookCountry: String? = nil, addressBookState: String? = nil, addressBookPostcode: String? = nil, addressBookGender: String? = nil, addressBookRegion: String? = nil, addressBookDefault: Bool? = nil, addressBookTaxId: String? = nil, addressBookIdentificationNumber: String? = nil, addressBookAlias: String? = nil) {
        self.addressBookType = addressBookType
        self.addressBookFirstName = addressBookFirstName
        self.addressBookLastName = addressBookLastName
        self.addressBookCompany = addressBookCompany
        self.addressBookFax = addressBookFax
        self.addressBookPhone = addressBookPhone
        self.addressBookPhoneMobile = addressBookPhoneMobile
        self.addressBookWebsite = addressBookWebsite
        self.addressBookAddress1 = addressBookAddress1
        self.addressBookAddress2 = addressBookAddress2
        self.addressBookCity = addressBookCity
        self.addressBookCountry = addressBookCountry
        self.addressBookState = addressBookState
        self.addressBookPostcode = addressBookPostcode
        self.addressBookGender = addressBookGender
        self.addressBookRegion = addressBookRegion
        self.addressBookDefault = addressBookDefault
        self.addressBookTaxId = addressBookTaxId
        self.addressBookIdentificationNumber = addressBookIdentificationNumber
        self.addressBookAlias = addressBookAlias
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case addressBookType = "address_book_type"
        case addressBookFirstName = "address_book_first_name"
        case addressBookLastName = "address_book_last_name"
        case addressBookCompany = "address_book_company"
        case addressBookFax = "address_book_fax"
        case addressBookPhone = "address_book_phone"
        case addressBookPhoneMobile = "address_book_phone_mobile"
        case addressBookWebsite = "address_book_website"
        case addressBookAddress1 = "address_book_address1"
        case addressBookAddress2 = "address_book_address2"
        case addressBookCity = "address_book_city"
        case addressBookCountry = "address_book_country"
        case addressBookState = "address_book_state"
        case addressBookPostcode = "address_book_postcode"
        case addressBookGender = "address_book_gender"
        case addressBookRegion = "address_book_region"
        case addressBookDefault = "address_book_default"
        case addressBookTaxId = "address_book_tax_id"
        case addressBookIdentificationNumber = "address_book_identification_number"
        case addressBookAlias = "address_book_alias"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(addressBookType, forKey: .addressBookType)
        try container.encodeIfPresent(addressBookFirstName, forKey: .addressBookFirstName)
        try container.encodeIfPresent(addressBookLastName, forKey: .addressBookLastName)
        try container.encodeIfPresent(addressBookCompany, forKey: .addressBookCompany)
        try container.encodeIfPresent(addressBookFax, forKey: .addressBookFax)
        try container.encodeIfPresent(addressBookPhone, forKey: .addressBookPhone)
        try container.encodeIfPresent(addressBookPhoneMobile, forKey: .addressBookPhoneMobile)
        try container.encodeIfPresent(addressBookWebsite, forKey: .addressBookWebsite)
        try container.encodeIfPresent(addressBookAddress1, forKey: .addressBookAddress1)
        try container.encodeIfPresent(addressBookAddress2, forKey: .addressBookAddress2)
        try container.encodeIfPresent(addressBookCity, forKey: .addressBookCity)
        try container.encodeIfPresent(addressBookCountry, forKey: .addressBookCountry)
        try container.encodeIfPresent(addressBookState, forKey: .addressBookState)
        try container.encodeIfPresent(addressBookPostcode, forKey: .addressBookPostcode)
        try container.encodeIfPresent(addressBookGender, forKey: .addressBookGender)
        try container.encodeIfPresent(addressBookRegion, forKey: .addressBookRegion)
        try container.encodeIfPresent(addressBookDefault, forKey: .addressBookDefault)
        try container.encodeIfPresent(addressBookTaxId, forKey: .addressBookTaxId)
        try container.encodeIfPresent(addressBookIdentificationNumber, forKey: .addressBookIdentificationNumber)
        try container.encodeIfPresent(addressBookAlias, forKey: .addressBookAlias)
    }
}

