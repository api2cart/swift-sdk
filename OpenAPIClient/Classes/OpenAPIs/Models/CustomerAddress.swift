//
// CustomerAddress.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CustomerAddress: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var type: String?
    public var firstName: String?
    public var lastName: String?
    public var postcode: String?
    public var address1: String?
    public var address2: String?
    public var phone: String?
    public var phoneMobile: String?
    public var city: String?
    public var country: Country?
    public var state: State?
    public var company: String?
    public var fax: String?
    public var website: String?
    public var gender: String?
    public var region: String?
    public var _default: Bool?
    public var taxId: String?
    public var identificationNumber: String?
    public var alias: String?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, type: String? = nil, firstName: String? = nil, lastName: String? = nil, postcode: String? = nil, address1: String? = nil, address2: String? = nil, phone: String? = nil, phoneMobile: String? = nil, city: String? = nil, country: Country? = nil, state: State? = nil, company: String? = nil, fax: String? = nil, website: String? = nil, gender: String? = nil, region: String? = nil, _default: Bool? = nil, taxId: String? = nil, identificationNumber: String? = nil, alias: String? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.type = type
        self.firstName = firstName
        self.lastName = lastName
        self.postcode = postcode
        self.address1 = address1
        self.address2 = address2
        self.phone = phone
        self.phoneMobile = phoneMobile
        self.city = city
        self.country = country
        self.state = state
        self.company = company
        self.fax = fax
        self.website = website
        self.gender = gender
        self.region = region
        self._default = _default
        self.taxId = taxId
        self.identificationNumber = identificationNumber
        self.alias = alias
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case firstName = "first_name"
        case lastName = "last_name"
        case postcode
        case address1
        case address2
        case phone
        case phoneMobile = "phone_mobile"
        case city
        case country
        case state
        case company
        case fax
        case website
        case gender
        case region
        case _default = "default"
        case taxId = "tax_id"
        case identificationNumber = "identification_number"
        case alias
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(postcode, forKey: .postcode)
        try container.encodeIfPresent(address1, forKey: .address1)
        try container.encodeIfPresent(address2, forKey: .address2)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(phoneMobile, forKey: .phoneMobile)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(fax, forKey: .fax)
        try container.encodeIfPresent(website, forKey: .website)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(_default, forKey: ._default)
        try container.encodeIfPresent(taxId, forKey: .taxId)
        try container.encodeIfPresent(identificationNumber, forKey: .identificationNumber)
        try container.encodeIfPresent(alias, forKey: .alias)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension CustomerAddress: Identifiable {}
