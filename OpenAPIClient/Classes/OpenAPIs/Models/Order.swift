//
// Order.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Order: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var orderId: String?
    public var basketId: String?
    public var channelId: String?
    public var customer: BaseCustomer?
    public var createAt: A2CDateTime?
    public var currency: Currency?
    public var shippingAddress: CustomerAddress?
    public var billingAddress: CustomerAddress?
    public var paymentMethod: OrderPaymentMethod?
    public var shippingMethod: OrderShippingMethod?
    public var shippingMethods: [OrderShippingMethod]?
    public var status: OrderStatus?
    public var totals: OrderTotals?
    public var total: OrderTotal?
    public var discounts: [OrderTotalsNewDiscount]?
    public var orderProducts: [OrderItem]?
    public var bundles: [OrderItem]?
    public var modifiedAt: A2CDateTime?
    public var finishedTime: A2CDateTime?
    public var comment: String?
    public var storeId: String?
    public var warehousesIds: [String]?
    public var refunds: [OrderRefund]?
    public var giftMessage: String?
    public var orderDetailsUrl: String?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, orderId: String? = nil, basketId: String? = nil, channelId: String? = nil, customer: BaseCustomer? = nil, createAt: A2CDateTime? = nil, currency: Currency? = nil, shippingAddress: CustomerAddress? = nil, billingAddress: CustomerAddress? = nil, paymentMethod: OrderPaymentMethod? = nil, shippingMethod: OrderShippingMethod? = nil, shippingMethods: [OrderShippingMethod]? = nil, status: OrderStatus? = nil, totals: OrderTotals? = nil, total: OrderTotal? = nil, discounts: [OrderTotalsNewDiscount]? = nil, orderProducts: [OrderItem]? = nil, bundles: [OrderItem]? = nil, modifiedAt: A2CDateTime? = nil, finishedTime: A2CDateTime? = nil, comment: String? = nil, storeId: String? = nil, warehousesIds: [String]? = nil, refunds: [OrderRefund]? = nil, giftMessage: String? = nil, orderDetailsUrl: String? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.orderId = orderId
        self.basketId = basketId
        self.channelId = channelId
        self.customer = customer
        self.createAt = createAt
        self.currency = currency
        self.shippingAddress = shippingAddress
        self.billingAddress = billingAddress
        self.paymentMethod = paymentMethod
        self.shippingMethod = shippingMethod
        self.shippingMethods = shippingMethods
        self.status = status
        self.totals = totals
        self.total = total
        self.discounts = discounts
        self.orderProducts = orderProducts
        self.bundles = bundles
        self.modifiedAt = modifiedAt
        self.finishedTime = finishedTime
        self.comment = comment
        self.storeId = storeId
        self.warehousesIds = warehousesIds
        self.refunds = refunds
        self.giftMessage = giftMessage
        self.orderDetailsUrl = orderDetailsUrl
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case orderId = "order_id"
        case basketId = "basket_id"
        case channelId = "channel_id"
        case customer
        case createAt = "create_at"
        case currency
        case shippingAddress = "shipping_address"
        case billingAddress = "billing_address"
        case paymentMethod = "payment_method"
        case shippingMethod = "shipping_method"
        case shippingMethods = "shipping_methods"
        case status
        case totals
        case total
        case discounts
        case orderProducts = "order_products"
        case bundles
        case modifiedAt = "modified_at"
        case finishedTime = "finished_time"
        case comment
        case storeId = "store_id"
        case warehousesIds = "warehouses_ids"
        case refunds
        case giftMessage = "gift_message"
        case orderDetailsUrl = "order_details_url"
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(basketId, forKey: .basketId)
        try container.encodeIfPresent(channelId, forKey: .channelId)
        try container.encodeIfPresent(customer, forKey: .customer)
        try container.encodeIfPresent(createAt, forKey: .createAt)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(shippingAddress, forKey: .shippingAddress)
        try container.encodeIfPresent(billingAddress, forKey: .billingAddress)
        try container.encodeIfPresent(paymentMethod, forKey: .paymentMethod)
        try container.encodeIfPresent(shippingMethod, forKey: .shippingMethod)
        try container.encodeIfPresent(shippingMethods, forKey: .shippingMethods)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(totals, forKey: .totals)
        try container.encodeIfPresent(total, forKey: .total)
        try container.encodeIfPresent(discounts, forKey: .discounts)
        try container.encodeIfPresent(orderProducts, forKey: .orderProducts)
        try container.encodeIfPresent(bundles, forKey: .bundles)
        try container.encodeIfPresent(modifiedAt, forKey: .modifiedAt)
        try container.encodeIfPresent(finishedTime, forKey: .finishedTime)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encodeIfPresent(warehousesIds, forKey: .warehousesIds)
        try container.encodeIfPresent(refunds, forKey: .refunds)
        try container.encodeIfPresent(giftMessage, forKey: .giftMessage)
        try container.encodeIfPresent(orderDetailsUrl, forKey: .orderDetailsUrl)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Order: Identifiable {}
