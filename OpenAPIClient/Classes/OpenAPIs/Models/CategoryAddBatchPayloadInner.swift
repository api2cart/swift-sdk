//
// CategoryAddBatchPayloadInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CategoryAddBatchPayloadInner: Codable, JSONEncodable, Hashable {

    public static let metaKeywordsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public static let imagesRule = ArrayRule(minItems: nil, maxItems: 1, uniqueItems: false)
    public static let storesIdsRule = ArrayRule(minItems: 1, maxItems: nil, uniqueItems: false)
    public var name: String
    public var avail: Bool?
    public var description: String?
    public var metaTitle: String?
    public var metaDescription: String?
    public var metaKeywords: [String]?
    public var parentId: String?
    public var sortOrder: Int?
    public var seoUrl: String?
    public var storeId: String?
    public var images: [CategoryAddBatchPayloadInnerImagesInner]?
    public var storesIds: [String]?

    public init(name: String, avail: Bool? = nil, description: String? = nil, metaTitle: String? = nil, metaDescription: String? = nil, metaKeywords: [String]? = nil, parentId: String? = nil, sortOrder: Int? = nil, seoUrl: String? = nil, storeId: String? = nil, images: [CategoryAddBatchPayloadInnerImagesInner]? = nil, storesIds: [String]? = nil) {
        self.name = name
        self.avail = avail
        self.description = description
        self.metaTitle = metaTitle
        self.metaDescription = metaDescription
        self.metaKeywords = metaKeywords
        self.parentId = parentId
        self.sortOrder = sortOrder
        self.seoUrl = seoUrl
        self.storeId = storeId
        self.images = images
        self.storesIds = storesIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case avail
        case description
        case metaTitle = "meta_title"
        case metaDescription = "meta_description"
        case metaKeywords = "meta_keywords"
        case parentId = "parent_id"
        case sortOrder = "sort_order"
        case seoUrl = "seo_url"
        case storeId = "store_id"
        case images
        case storesIds = "stores_ids"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(avail, forKey: .avail)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(metaTitle, forKey: .metaTitle)
        try container.encodeIfPresent(metaDescription, forKey: .metaDescription)
        try container.encodeIfPresent(metaKeywords, forKey: .metaKeywords)
        try container.encodeIfPresent(parentId, forKey: .parentId)
        try container.encodeIfPresent(sortOrder, forKey: .sortOrder)
        try container.encodeIfPresent(seoUrl, forKey: .seoUrl)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encodeIfPresent(images, forKey: .images)
        try container.encodeIfPresent(storesIds, forKey: .storesIds)
    }
}

