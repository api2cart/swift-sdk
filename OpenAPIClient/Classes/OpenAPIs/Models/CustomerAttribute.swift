//
// CustomerAttribute.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CustomerAttribute: Codable, JSONEncodable, Hashable {

    public var attributeId: String?
    public var code: String?
    public var name: String?
    public var type: String?
    public var values: [CustomerAttributeValue]?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(attributeId: String? = nil, code: String? = nil, name: String? = nil, type: String? = nil, values: [CustomerAttributeValue]? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.attributeId = attributeId
        self.code = code
        self.name = name
        self.type = type
        self.values = values
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attributeId = "attribute_id"
        case code
        case name
        case type
        case values
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(attributeId, forKey: .attributeId)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(values, forKey: .values)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

