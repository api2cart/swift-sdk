//
// BatchJobResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BatchJobResult: Codable, JSONEncodable, Hashable {

    public var jobId: Int?
    public var jobName: String?
    public var itemsProcessed: Int?
    public var itemsSucceed: Int?
    public var items: [BatchJobResultItem]?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(jobId: Int? = nil, jobName: String? = nil, itemsProcessed: Int? = nil, itemsSucceed: Int? = nil, items: [BatchJobResultItem]? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.jobId = jobId
        self.jobName = jobName
        self.itemsProcessed = itemsProcessed
        self.itemsSucceed = itemsSucceed
        self.items = items
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case jobId = "job_id"
        case jobName = "job_name"
        case itemsProcessed = "items_processed"
        case itemsSucceed = "items_succeed"
        case items
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(jobId, forKey: .jobId)
        try container.encodeIfPresent(jobName, forKey: .jobName)
        try container.encodeIfPresent(itemsProcessed, forKey: .itemsProcessed)
        try container.encodeIfPresent(itemsSucceed, forKey: .itemsSucceed)
        try container.encodeIfPresent(items, forKey: .items)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

