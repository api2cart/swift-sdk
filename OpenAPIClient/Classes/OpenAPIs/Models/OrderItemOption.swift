//
// OrderItemOption.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderItemOption: Codable, JSONEncodable, Hashable {

    public var optionId: String?
    public var name: String?
    public var value: String?
    public var price: Double?
    public var weight: Double?
    public var type: String?
    public var productOptionValueId: String?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(optionId: String? = nil, name: String? = nil, value: String? = nil, price: Double? = nil, weight: Double? = nil, type: String? = nil, productOptionValueId: String? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.optionId = optionId
        self.name = name
        self.value = value
        self.price = price
        self.weight = weight
        self.type = type
        self.productOptionValueId = productOptionValueId
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case optionId = "option_id"
        case name
        case value
        case price
        case weight
        case type
        case productOptionValueId = "product_option_value_id"
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(optionId, forKey: .optionId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(weight, forKey: .weight)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(productOptionValueId, forKey: .productOptionValueId)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

