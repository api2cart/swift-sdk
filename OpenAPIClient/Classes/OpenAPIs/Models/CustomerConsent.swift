//
// CustomerConsent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CustomerConsent: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var type: String?
    public var status: String?
    public var source: String?
    public var optInLevel: String?
    public var modifiedTime: String?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(id: String? = nil, type: String? = nil, status: String? = nil, source: String? = nil, optInLevel: String? = nil, modifiedTime: String? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.id = id
        self.type = type
        self.status = status
        self.source = source
        self.optInLevel = optInLevel
        self.modifiedTime = modifiedTime
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case status
        case source
        case optInLevel = "opt_in_level"
        case modifiedTime = "modified_time"
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(optInLevel, forKey: .optInLevel)
        try container.encodeIfPresent(modifiedTime, forKey: .modifiedTime)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension CustomerConsent: Identifiable {}
