//
// ShipmentItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ShipmentItem: Codable, JSONEncodable, Hashable {

    public var orderProductId: String?
    public var productId: String?
    public var variantId: String?
    public var model: String?
    public var name: String?
    public var price: Double?
    public var quantity: Double?
    public var additionalFields: AnyCodable?
    public var customFields: AnyCodable?

    public init(orderProductId: String? = nil, productId: String? = nil, variantId: String? = nil, model: String? = nil, name: String? = nil, price: Double? = nil, quantity: Double? = nil, additionalFields: AnyCodable? = nil, customFields: AnyCodable? = nil) {
        self.orderProductId = orderProductId
        self.productId = productId
        self.variantId = variantId
        self.model = model
        self.name = name
        self.price = price
        self.quantity = quantity
        self.additionalFields = additionalFields
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case orderProductId = "order_product_id"
        case productId = "product_id"
        case variantId = "variant_id"
        case model
        case name
        case price
        case quantity
        case additionalFields = "additional_fields"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(orderProductId, forKey: .orderProductId)
        try container.encodeIfPresent(productId, forKey: .productId)
        try container.encodeIfPresent(variantId, forKey: .variantId)
        try container.encodeIfPresent(model, forKey: .model)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(additionalFields, forKey: .additionalFields)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

